/*
 * depile: translate three-address code back to C code.
 * Copyright (C) 2021  Ruifeng Xie
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

//! Translate three-address code back to C code.
//!
//! In principle, one should be able to find specification of the input format on
//! [this lab description page](https://www.cs.utexas.edu/users/mckinley/380C/labs/lab1.html).
//! However, there is no formal definition (in BNF, EBNF, or whichever variant of BNF at your
//! choice, as one would usually expect); only some informal discussion can be found in Section
//! "The 3-Address Intermediate Format".
//!
//! Fortunately, this three-address code format is used nowhere else (and we are, and hopefully will
//! be, the only ones to suffer from poor documentation). Since no other tool than `csc` (bundled in
//! lab materials) should ever be producing files in this format, we assume that the input will
//! always appear as if it were generated by `csc`, with a few relaxations.
//!
//! > **Did You Know?:** year 2022 is arriving, yet the whole build process of `csc` is managed not
//! > even with `Makefile` (!), but with a _minimalistic_ Bash script assuming the local C compiler
//! > always being `gcc`...
//! >
//! > _"Take this, noob! This is how we program in the REAL WORLD!"_
//!
//! # Input Specification
//!
//! Input is handled per line. Lines are trimmed, and empty lines are filtered out.
//!
//! Every line starts with a header indicating the instruction index, followed by the instruction:
//! ```csc-output
//! instr 14: add res_base#32744 GP
//! ```
//! Instructions are parsed into [`Instr`]s structurally.

#![warn(missing_docs)]

pub mod instr;
pub mod program;
pub mod block;
// pub mod function;
//
// #[cfg(feature = "cli")]
// pub mod cli;
//
// #[cfg(feature = "cli")]
// pub use cli::Cli;

#[cfg(test)]
mod samples;

pub use instr::Instr;
pub use program::Program;
pub use block::{Block, Blocks};
// pub use function::{Function, ControlFlow};
